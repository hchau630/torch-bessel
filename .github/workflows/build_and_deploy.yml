name: Build and upload to PyPI

on:
  workflow_dispatch:
  # pull_request:
  # push:
  #   branches:
  #     - main
  release:
    types:
      - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0
        env:
          # CIBW_BUILD: cp*-macosx_* cp*-manylinux_*
          # CIBW_SKIP: cp*-manylinux_armv7l
          # CIBW_BUILD: cp*-macosx_arm64 cp*-manylinux_x86_64
          # CIBW_SKIP: cp313-*
          CIBW_BUILD: cp311-manylinux_x86_64
          CIBW_BUILD_FRONTEND: build
          CIBW_BEFORE_LINUX: >
            yum-config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-rhel7.repo &&
            yum clean all &&
            yum -y install cuda-toolkit-12-4 &&
            export CPATH=/usr/local/cuda/include:$CPATH
          # https://github.com/pytorch/test-infra/blob/main/tools/pkg-helpers/pytorch_pkg_helpers/cuda.py
          CIBW_ENVIRONMENT: >
            TORCH_CUDA_ARCH_LIST="5.0+PTX;6.0;7.0;7.5;8.0;8.6;9.0"
            FORCE_CUDA=1
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
          # see https://github.com/pytorch/ao/blob/main/packaging/post_build_script.sh
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            auditwheel repair --exclude libtorch.so --exclude libtorch_python.so --exclude libtorch_cuda.so --exclude libtorch_cpu.so --exclude libc10.so --exclude libc10_cuda.so --exclude libcudart.so.12 --exclude libcudart.so.11.0  -w {dest_dir} {wheel}
          # CIBW_TEST_REQUIRES: pytest expecttest scipy
          # CIBW_TEST_COMMAND: pytest {project}/tests

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  upload_pypi:
    needs: [build_wheels]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
